AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline Notification Lambda

#-----------------------------------------------------------------------------
#Parameters
#-----------------------------------------------------------------------------
Parameters:

  TeamsURL:
    Description: "Incoming Microsoft Teams Webhook URL"
    Type: String
    Default: "https://deloitte.webhook.office.com/webhookb2/79589173-7693-4d17-9763-1aec2148c66e@36da45f1-dd2c-4d1f-af13-5abe46b99921/IncomingWebhook/399892bacb0e49988ef0786ec4d4b7c9/4ea7e67b-20c3-4773-bc1b-d82aa1940d79"

  CodePipelineName:
    Description: "Codepipeline Name"
    Type: String
    Default: "telematics-eks-light-api" 

#-----------------------------------------------------------------------------
#Resources
#-----------------------------------------------------------------------------
Resources:
  NotificationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.index_handler
      Code:
        ZipFile: |
          import urllib3
          import json
          import os
          http = urllib3.PoolManager()
          def index_handler(event, context):
              url = os.environ['TEAMS_URL']
              event_message = event['Records'][0]['Sns']['Message']
              message_dict  = json.loads(event_message)
              pipeline_name = message_dict["detail"]["pipeline"]
              pipeline_status = message_dict["detail"]["state"]
              print(pipeline_name)
              msg = {
                  "text": f"Pipeline: {pipeline_name} has: {pipeline_status}"
              }
              encoded_msg = json.dumps(msg).encode('utf-8')
              resp = http.request('POST',url, body=encoded_msg)
              print({
                  "message": pipeline_name,
                  "status_code": resp.status,
                "response": resp.data
              })
      MemorySize: 128
      Environment:
        Variables:
          TEAMS_URL: !Ref TeamsURL
      Runtime: 'python3.7'
      Timeout: 30
      Role: !GetAtt NotificationLambdaFunctioneRole.Arn
  NotificationLambdaFunctioneRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'customresource'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
            
  EventRule:
    DependsOn: NotificationLambdaFunction
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
          pipeline:
            - !Ref CodePipelineName
        resources:
          - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineName}'
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: "SNSTopic"
          Id: "NotificationTeams"
  PermissionLambda:
      DependsOn: NotificationLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: "NotificationLambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: "sns.amazonaws.com"
        SourceArn: !Ref SNSTopic
  SNSTopic:
      DependsOn: NotificationLambdaFunction
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: String
        Subscription:
          - Protocol: lambda
            Endpoint: !GetAtt NotificationLambdaFunction.Arn
  SnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn: SNSTopic
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: SnsTopicPolicy
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Resource:
              Ref: SNSTopic
          - Sid: SnsTopicPolicyEvent
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "SNS:Publish"
            Resource:
              Ref: SNSTopic
      Topics:
        - Ref: SNSTopic
